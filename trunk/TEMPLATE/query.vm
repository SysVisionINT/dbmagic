/**
 * Generated by SysVision DBMagic
 */
package ${packageName};

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.naming.NamingException;
import javax.sql.DataSource;

import net.java.sjtools.error.UnexpectedError;
import net.java.sjtools.db.DBUtil;
import net.java.sjtools.db.NullReader;
import net.java.sjtools.util.JNDIUtil;
import net.java.sjtools.util.BeanUtil;
import net.java.sjtools.db.filter.Filter;
import net.java.sjtools.db.error.SQLError;
#if(${loggerType} == "log")
import net.java.sjtools.logging.Log;
import net.java.sjtools.logging.LogFactory;
#else
import net.java.sjtools.logging.plus.RLog;
#end
import net.java.sjtools.db.sql.SQLUtil;

/**
 * Esta classe implementa a query $query.name
#if($query.description)
 *
#foreach ($line in ${query.getDescriptionLines()})	    
 * $line
#end
 *
#end 
 * @author SysVision DBMagic
 */ 
public class ${java.getName($query)} {
#if(${loggerType} == "log")
    private static Log log = LogFactory.getLog(${java.getName($query)}.class);
    
#end
    private DataSource dataSource = null;
    
    protected ${java.getName($query)}(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    /**
     * Devolve uma instancia da classe ${java.getName($query)}
     * @param jndiName Nome JNDI do datasource a utilizar para aceder à base de dados
     * @return Instancia da classe ${java.getName($query)}
     * @throws NamingException Se ocorrer um erro no acesso ao serviço JNDI
     */
    public static ${java.getName($query)} getInstance(String jndiName) throws NamingException {
        return getInstance((DataSource)JNDIUtil.getJNDIObject(jndiName));
    }

    /**
     * Devolve uma instancia da classe ${java.getName($query)}
     * @param dataSource Datasource a utilizar para aceder à base de dados
     * @return Instancia da classe ${java.getName($query)}
     */
    public static ${java.getName($query)} getInstance(DataSource dataSource) {
        return new ${java.getName($query)}(dataSource);
    }
    
    protected DataSource getDataSource() {
        return dataSource;
    }
    
#if($query.isUseFilter())    
    /**
     * Permite obter o numero de registos que respeitam a query ${java.getName($query)} e o filtro com a possibilidade de restringir o numero de registos devolvidos
     * @param filter Filtro com as restrições a aplicar   
     * @return Numero de registos
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */     
    public long count(Filter filter) throws SQLError, UnexpectedError {
        if (${loggerType}.isDebugEnabled()) {
            ${loggerType}.debug("count(...)");
        }
		            
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        long ret = 0;

        try {
            con = DBUtil.getConnection(getDataSource());
            ps = con.prepareStatement(SQLUtil.getSelectCount("${sql.getSelectCountForQuery($query)}", filter), ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);

            if (filter != null) {
                filter.setValues(ps);
            }
            
            rs = ps.executeQuery();

            if (rs.next()) {
                ret = rs.getLong(1);
            }
        } catch (SQLException e) {     
            ${loggerType}.error("SQLException catched while executing count(...)", e);
            throw new SQLError(e);  
        } catch (Exception e) {  
            ${loggerType}.error("Exception catched while executing count(...)", e);
            throw new UnexpectedError(e);                         
        } finally {
            DBUtil.close(rs);
            DBUtil.close(ps);
            DBUtil.close(con);
        }
        
        return ret;
    }   

#if(${model.isCollectionQuery($query)})
    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)} e o filtro com a possibilidade de restringir o numero de registos devolvidos
     * @param filter Filtro com as restrições a aplicar 
     * @param skipRows Numero de registos a ignorar (0 - Não ignora registos)
     * @param maxRows Numero maximo de registos a devolver (0 - Sem limite)     
     * @return Lista de instancias da classe ${java.getReturnType($query)}
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */
    public Collection#if(${java6.booleanValue()})<${java.getReturnType($query)}>#end execute(Filter filter, int skipRows, int maxRows) throws SQLError, UnexpectedError {
        if (${loggerType}.isDebugEnabled()) {
            ${loggerType}.debug("execute(..., " + skipRows + ", " + maxRows + ")");
        }
		            
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        List#if(${java6.booleanValue()})<${java.getReturnType($query)}>#end list = new ArrayList#if(${java6.booleanValue()})<${java.getReturnType($query)}>#end();

        try {
            con = DBUtil.getConnection(getDataSource());
            ps = con.prepareStatement(SQLUtil.getUpdatedSelect("${sql.getSelectForQuery($query)}", filter), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setMaxRows(skipRows + maxRows);
            
            if (filter != null) {
                filter.setValues(ps);
            }

            rs = ps.executeQuery();
            
            if (skipRows == 0 || rs.absolute(skipRows)) {
                while (rs.next()) {
                    list.add(readObject(rs));
                }
            }
        } catch (SQLException e) {     
            ${loggerType}.error("SQLException catched while executing ${java.getName($query)}.execute(..., " + skipRows + ", " + maxRows + ")", e);
            throw new SQLError(e);   
        } catch (Exception e) {  
            ${loggerType}.error("Exception catched while executing ${java.getName($query)}.execute(..., " + skipRows + ", " + maxRows + ")", e);
            throw new UnexpectedError(e);                                  
        } finally {
            DBUtil.close(rs);
            DBUtil.close(ps);
            DBUtil.close(con);
        }
        
        return list;
    }
    
    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)} e o filtro 
     * @param filter Filtro com as restrições a aplicar 
     * @return Lista de instancias da classe ${java.getReturnType($query)}
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */
    public Collection#if(${java6.booleanValue()})<${java.getReturnType($query)}>#end execute(Filter filter) throws SQLError, UnexpectedError {    
        return execute(filter, 0, 0);
    }
    
    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)} e o filtro com a possibilidade de restringir o numero de registos devolvidos
     * @param callback Objecto que irá processar cada um dos registos encontrados (possui o método: public void process(${java.getReturnType($query)} obj))
     * @param filter Filtro com as restrições a aplicar 
     * @param skipRows Numero de registos a ignorar (0 - Não ignora registos)
     * @param maxRows Numero maximo de registos a devolver (0 - Sem limite)     
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado 
     */
    public void execute(Object callback, Filter filter, int skipRows, int maxRows) throws SQLError, UnexpectedError {
        if (${loggerType}.isDebugEnabled()) {
            ${loggerType}.debug("execute(..., ..., " + skipRows + ", " + maxRows + ")");
        }
		            
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        BeanUtil callbackUtil = new BeanUtil(callback);
        Object[] callbackArgs = new Object[1];

        try {
            con = DBUtil.getConnection(getDataSource());
            ps = con.prepareStatement(SQLUtil.getUpdatedSelect("${sql.getSelectForQuery($query)}", filter), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setMaxRows(skipRows + maxRows);

            if (filter != null) {
                filter.setValues(ps);
            }

            rs = ps.executeQuery();

            if (skipRows == 0 || rs.absolute(skipRows)) {        
                while (rs.next()) {
                    callbackArgs[0] = readObject(rs);
                    callbackUtil.invokeMethod("process", callbackArgs);
                }
            }
        } catch (SQLException e) {     
            ${loggerType}.error("SQLException catched while executing ${java.getName($query)}.execute(..., ..., " + skipRows + ", " + maxRows + ")", e);
            throw new SQLError(e);                  
        } catch (Exception e) {     
            ${loggerType}.error("Exception catched while trying to execute method public void process(${java.getReturnType($query)} obj) on object " + callback.getClass().getName() + " in query ${java.getName($query)}.execute(..., ..., " + skipRows + ", " + maxRows + ")", e);
            throw new UnexpectedError(e);             
        } finally {
            DBUtil.close(rs);
            DBUtil.close(ps);
            DBUtil.close(con);
        }
    }    

    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)} e o filtro 
     * @param callback Objecto que irá processar cada um dos registos encontrados (possui o método: public void process(${java.getReturnType($query)} obj))
     * @param filter Filtro com as restrições a aplicar    
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */
    public void execute(Object callback, Filter filter) throws SQLError, UnexpectedError {    
        execute(callback, filter, 0, 0);
    }    
#else
    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)} e o filtro 
     * @param filter Filtro com as restrições a aplicar 
     * @return Uma instancia da classe ${java.getReturnType($query)}
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */
    public ${java.getReturnType($query)} execute(Filter filter) throws SQLError, UnexpectedError {
        if (${loggerType}.isDebugEnabled()) {
            ${loggerType}.debug("execute(...)");
        }
		            
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        ${java.getReturnType($query)} ret = null;

        try {
            con = DBUtil.getConnection(getDataSource());
            ps = con.prepareStatement(SQLUtil.getUpdatedSelect("${sql.getSelectForQuery($query)}", filter), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            if (filter != null) {
                filter.setValues(ps);
            }

            rs = ps.executeQuery();
            
            if (rs.next()) {
                ret = readObject(rs);
            }
        } catch (SQLException e) {     
            ${loggerType}.error("SQLException catched while executing ${java.getName($query)}.execute(...)", e);
            throw new SQLError(e);   
        } catch (Exception e) {  
            ${loggerType}.error("Exception catched while executing ${java.getName($query)}.execute(...)", e);
            throw new UnexpectedError(e);                                  
        } finally {
            DBUtil.close(rs);
            DBUtil.close(ps);
            DBUtil.close(con);
        }
        
        return ret;
    }
#end
#else
    /**
     * Permite obter o numero de registos que respeitam a query ${java.getName($query)} com a possibilidade de restringir o numero de registos devolvidos
#foreach ($parametro in ${query.getUniqueParameterList()})	     
     * @param ${parametro.name} Valor do parametro ${parametro.name}
#end	
     * @return Numero de registos
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */     
    public long count(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)${parametro.javaType} ${parametro.name}#set ($primeira=0)#else, ${parametro.javaType} ${parametro.name}#end#end) throws SQLError, UnexpectedError {
        if (${loggerType}.isDebugEnabled()) {
            ${loggerType}.debug("count(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end)");
        }
		            
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        long ret = 0;

        try {
            con = DBUtil.getConnection(getDataSource());
            ps = con.prepareStatement("${sql.getSelectCountForQuery($query)}", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);

#set($primeira=1)
#foreach ($parametro in ${query.getParameterList()})
#if($java.isWrapperClass($parametro))

            if (${parametro.name} == null) {
                ps.setNull($primeira, Types.$java.getSQLType($parametro));
            } else {
                ps.${java.getJavaTypeSetter($parametro)}($primeira, ${parametro.name}#if($java.isWrapperClass($parametro))$java.primitiveGetter($parametro)#end);                        
            }
        
#else
            ps.${java.getJavaTypeSetter($parametro)}($primeira, ${parametro.name});
#end  
#set($primeira=$primeira+1)
#end
            
            rs = ps.executeQuery();

            if (rs.next()) {
                ret = rs.getLong(1);
            }
        } catch (SQLException e) {     
            ${loggerType}.error("SQLException catched while executing count(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end)", e);
            throw new SQLError(e);  
        } catch (Exception e) {  
            ${loggerType}.error("Exception catched while executing count(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end)", e);
            throw new UnexpectedError(e);                         
        } finally {
            DBUtil.close(rs);
            DBUtil.close(ps);
            DBUtil.close(con);
        }
        
        return ret;
    }  
    
#if(${model.isCollectionQuery($query)})   
    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)} com a possibilidade de restringir o numero de registos devolvidos
#foreach ($parametro in ${query.getUniqueParameterList()})	     
     * @param ${parametro.name} Valor do parametro ${parametro.name}
#end	     
     * @param skipRows Numero de registos a ignorar (0 - Não ignora registos)
     * @param maxRows Numero maximo de registos a devolver (0 - Sem limite)     
     * @return Lista de instancias da classe ${java.getReturnType($query)}
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */
    public Collection#if(${java6.booleanValue()})<${java.getReturnType($query)}>#end execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)${parametro.javaType} ${parametro.name}#set ($primeira=0)#else, ${parametro.javaType} ${parametro.name}#end#end#if($primeira==0),#end int skipRows, int maxRows) throws SQLError, UnexpectedError {
        if (${loggerType}.isDebugEnabled()) {
            ${loggerType}.debug("execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end#if($primeira==0),#end " + skipRows + ", " + maxRows + ")");
        }
		            
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        List#if(${java6.booleanValue()})<${java.getReturnType($query)}>#end list = new ArrayList#if(${java6.booleanValue()})<${java.getReturnType($query)}>#end();

        try {
            con = DBUtil.getConnection(getDataSource());
            ps = con.prepareStatement("${sql.getSelectForQuery($query)}", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setMaxRows(skipRows + maxRows);

#set($primeira=1)
#foreach ($parametro in ${query.getParameterList()})
#if($java.isWrapperClass($parametro))

            if (${parametro.name} == null) {
                ps.setNull($primeira, Types.$java.getSQLType($parametro));
            } else {
                ps.${java.getJavaTypeSetter($parametro)}($primeira, ${parametro.name}#if($java.isWrapperClass($parametro))$java.primitiveGetter($parametro)#end);                        
            }
        
#else
            ps.${java.getJavaTypeSetter($parametro)}($primeira, ${parametro.name});
#end  
#set($primeira=$primeira+1)
#end

            rs = ps.executeQuery();
            
            if (skipRows == 0 || rs.absolute(skipRows)) {
                while (rs.next()) {
                    list.add(readObject(rs));
                }
            }
        } catch (SQLException e) {     
            ${loggerType}.error("SQLException catched while executing ${java.getName($query)}.execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end#if($primeira==0),#end " + skipRows + ", " + maxRows + ")", e);
            throw new SQLError(e);   
        } catch (Exception e) {  
            ${loggerType}.error("Exception catched while executing ${java.getName($query)}.execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end#if($primeira==0),#end " + skipRows + ", " + maxRows + ")", e);
            throw new UnexpectedError(e);                                  
        } finally {
            DBUtil.close(rs);
            DBUtil.close(ps);
            DBUtil.close(con);
        }
        
        return list;
    }
    
    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)}
#foreach ($parametro in ${query.getUniqueParameterList()})	     
     * @param ${parametro.name} Valor do parametro ${parametro.name}
#end	     
     * @return Lista de instancias da classe ${java.getReturnType($query)}
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */
    public Collection#if(${java6.booleanValue()})<${java.getReturnType($query)}>#end execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)${parametro.javaType} ${parametro.name}#set ($primeira=0)#else, ${parametro.javaType} ${parametro.name}#end#end) throws SQLError, UnexpectedError {    
        return execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)${parametro.name}#set ($primeira=0)#else, ${parametro.name}#end#end#if($primeira==0),#end 0, 0);
    }
    
    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)} com a possibilidade de restringir o numero de registos devolvidos
     * @param callback Objecto que irá processar cada um dos registos encontrados (possui o método: public void process(${java.getReturnType($query)} obj))
#foreach ($parametro in ${query.getUniqueParameterList()})	     
     * @param ${parametro.name} Valor do parametro ${parametro.name}
#end	     
     * @param skipRows Numero de registos a ignorar (0 - Não ignora registos)
     * @param maxRows Numero maximo de registos a devolver (0 - Sem limite)     
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado 
     */
    public void execute(Object callback#foreach ($parametro in ${query.getUniqueParameterList()}), ${parametro.javaType} ${parametro.name}#end, int skipRows, int maxRows) throws SQLError, UnexpectedError {
        if (${loggerType}.isDebugEnabled()) {
            ${loggerType}.debug("execute(...#foreach ($parametro in ${query.getUniqueParameterList()}), " + ${parametro.name} + "#end, " + skipRows + ", " + maxRows + ")");
        }
		            
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        BeanUtil callbackUtil = new BeanUtil(callback);
        Object[] callbackArgs = new Object[1];

        try {
            con = DBUtil.getConnection(getDataSource());
            ps = con.prepareStatement("${sql.getSelectForQuery($query)}", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setMaxRows(skipRows + maxRows);

#set($primeira=1)
#foreach ($parametro in ${query.getParameterList()})
#if($java.isWrapperClass($parametro))

            if (${parametro.name} == null) {
                ps.setNull($primeira, Types.$java.getSQLType($parametro));
            } else {
                ps.${java.getJavaTypeSetter($parametro)}($primeira, ${parametro.name}#if($java.isWrapperClass($parametro))$java.primitiveGetter($parametro)#end);                        
            }
        
#else
            ps.${java.getJavaTypeSetter($parametro)}($primeira, ${parametro.name});
#end  
#set($primeira=$primeira+1)
#end

            rs = ps.executeQuery();

            if (skipRows == 0 || rs.absolute(skipRows)) {        
                while (rs.next()) {
                    callbackArgs[0] = readObject(rs);
                    callbackUtil.invokeMethod("process", callbackArgs);
                }
            }
        } catch (SQLException e) {     
            ${loggerType}.error("SQLException catched while executing ${java.getName($query)}.execute(...#foreach ($parametro in ${query.getUniqueParameterList()}), " + ${parametro.name} + "#end, " + skipRows + ", " + maxRows + ")", e);
            throw new SQLError(e);                  
        } catch (Exception e) {     
            ${loggerType}.error("Exception catched while trying to execute method public void process(${java.getReturnType($query)} obj) on object " + callback.getClass().getName() + " in query ${java.getName($query)}.execute(...#foreach ($parametro in ${query.getUniqueParameterList()}), " + ${parametro.name} + "#end, " + skipRows + ", " + maxRows + ")", e);
            throw new UnexpectedError(e);             
        } finally {
            DBUtil.close(rs);
            DBUtil.close(ps);
            DBUtil.close(con);
        }
    }    

    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)}
     * @param callback Objecto que irá processar cada um dos registos encontrados (possui o método: public void process(${java.getReturnType($query)} obj))
#foreach ($parametro in ${query.getUniqueParameterList()})	     
     * @param ${parametro.name} Valor do parametro ${parametro.name}
#end	     
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */
    public void execute(Object callback#foreach ($parametro in ${query.getUniqueParameterList()}), ${parametro.javaType} ${parametro.name}#end) throws SQLError, UnexpectedError {    
        execute(callback,#foreach ($parametro in ${query.getUniqueParameterList()}) ${parametro.name},#end 0, 0);
    }    
#else
    /**
     * Permite obter os dados que respeitam a query ${java.getName($query)}
#foreach ($parametro in ${query.getUniqueParameterList()})	     
     * @param ${parametro.name} Valor do parametro ${parametro.name}
#end	      
     * @return Uma instancia da classe ${java.getReturnType($query)}
     * @throws SQLError Se ocorrer um erro no acesso à Base de Dados
     * @throws UnexpectedError Se ocorrer um erro inesperado     
     */
    public ${java.getReturnType($query)} execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)${parametro.javaType} ${parametro.name}#set ($primeira=0)#else, ${parametro.javaType} ${parametro.name}#end#end) throws SQLError, UnexpectedError {
        if (${loggerType}.isDebugEnabled()) {
            ${loggerType}.debug("execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end)");
        }
		            
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        ${java.getReturnType($query)} ret = null;

        try {
            con = DBUtil.getConnection(getDataSource());
            ps = con.prepareStatement("${sql.getSelectForQuery($query)}", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

#set($primeira=1)
#foreach ($parametro in ${query.getParameterList()})
#if($java.isWrapperClass($parametro))

            if (${parametro.name} == null) {
                ps.setNull($primeira, Types.$java.getSQLType($parametro));
            } else {
                ps.${java.getJavaTypeSetter($parametro)}($primeira, ${parametro.name}#if($java.isWrapperClass($parametro))$java.primitiveGetter($parametro)#end);                        
            }
        
#else
            ps.${java.getJavaTypeSetter($parametro)}($primeira, ${parametro.name});
#end  
#set($primeira=$primeira+1)
#end

            rs = ps.executeQuery();
            
            if (rs.next()) {
                ret = readObject(rs);
            }
        } catch (SQLException e) {     
            ${loggerType}.error("SQLException catched while executing ${java.getName($query)}.execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end)", e);
            throw new SQLError(e);   
        } catch (Exception e) {  
            ${loggerType}.error("Exception catched while executing ${java.getName($query)}.execute(#set ($primeira=1)#foreach ($parametro in ${query.getUniqueParameterList()})#if ($primeira==1)" + ${parametro.name} + "#set ($primeira=0)#else, " + ${parametro.name} + "#end#end)", e);
            throw new UnexpectedError(e);                                  
        } finally {
            DBUtil.close(rs);
            DBUtil.close(ps);
            DBUtil.close(con);
        }
        
        return ret;
    }
#end
#end

    protected ${java.getReturnType($query)} readObject(ResultSet rs) throws SQLException {
        ${java.getReturnType($query)} obj = new ${java.getReturnType($query)}();
        
#foreach ($field in ${query.getReturnObject().getFieldMapList()})
#if (${java.isWrapperClass($field)})
        obj.${java.getSetter($field)}(NullReader.${java.getJavaTypeGetter($field)}(rs, #if (${java.isUseName($field)})"${field.columnName}"#else${field.columnPosition}#end));
#else
        obj.${java.getSetter($field)}(rs.${java.getJavaTypeGetter($field)}(#if (${java.isUseName($field)})"${field.columnName}"#else${field.columnPosition}#end));
#end
#end      
        
        return obj;
    }
}
