/**
 * Generated by SysVision DBMagic
 */
package ${packageName};

import java.io.Serializable;

/**
 * Classe correspondente à tabela $entity.name
#if($entity.description)
 *
#foreach ($line in ${entity.getDescriptionLines()})	    
 * $line
#end
 *
#end
 * @author SysVision DBMagic
 */ 
public class ${java.getName($entity)} implements Serializable {
    private static final long serialVersionUID = ${java.getSerialVersionUID($entity)}L;
    
    /**
     * Constructor sem parametros
     */ 
    public ${java.getName($entity)} () {
    }    
#if ($model.hasPrimaryKey($entity))    

    /**
     * Constructor com as colunas da chave primária
#foreach ($coluna in ${entity.getPrimaryKey().getColumnList()})	     
     * @param ${java.getInnerName($coluna)} Indica o valor da coluna $coluna.name
#end	      
     */ 
    public ${java.getName($entity)} (#set ($primeira=1)#foreach ($coluna in ${entity.getPrimaryKey().getColumnList()})#if ($primeira==1)${java.getJavaType($coluna)} ${java.getInnerName($coluna)}#set ($primeira=0)#else, ${java.getJavaType($coluna)} ${java.getInnerName($coluna)}#end#end) {
#foreach ($coluna in ${entity.getPrimaryKey().getColumnList()})	     
        ${java.getSetter($coluna)}(${java.getInnerName($coluna)});
#end	     
    }    
#end
    
#foreach ($coluna in ${entity.getPrimaryKey().getColumnList()})
    private ${java.getJavaType($coluna)} ${java.getInnerName($coluna)};   
    
    /**
     * Devolve o valor da coluna $coluna.name
     * @return Valor da coluna $coluna.name
     */ 
    public ${java.getJavaType($coluna)} ${java.getGetter($coluna)} () {
        return ${java.getInnerName($coluna)};
    }
    
    /**
     * Permite definir o valor da coluna $coluna.name
     * @param ${java.getInnerName($coluna)} Novo valor para a coluna $coluna.name
     */       
    public void ${java.getSetter($coluna)} (${java.getJavaType($coluna)} ${java.getInnerName($coluna)}) {
        this.${java.getInnerName($coluna)} = ${java.getInnerName($coluna)};      
    }

#end    
#foreach ($coluna in ${entity.getColumnList()})
    private ${java.getJavaType($coluna)} ${java.getInnerName($coluna)};
#if (!$entity.readOnly)     
    protected boolean ${java.getInnerName($coluna)}Changed = false;
#end    
    
    /**
     * Devolve o valor da coluna $coluna.name
     * @return Valor da coluna $coluna.name
     */     
    public ${java.getJavaType($coluna)} ${java.getGetter($coluna)} () {
        return ${java.getInnerName($coluna)};
    }

    /**
     * Permite definir o valor da coluna $coluna.name
     * @param ${java.getInnerName($coluna)} Novo valor para a coluna $coluna.name
     */     
    public void ${java.getSetter($coluna)} (${java.getJavaType($coluna)} ${java.getInnerName($coluna)}) {
        this.${java.getInnerName($coluna)} = ${java.getInnerName($coluna)};
#if (!$entity.readOnly)         
        ${java.getInnerName($coluna)}Changed = true;
#end        
    }

#end
#if ($model.hasVersionControl($entity))
    private ${entity.versionControlColumn.column.javaType} ${java.getInnerName($entity.versionControlColumn.column)};   

    /**
     * Devolve o valor da coluna $entity.versionControlColumn.column.name
     * @return Valor da coluna $entity.versionControlColumn.column.name
     */ 
    public ${entity.versionControlColumn.column.getJavaType()} ${java.getGetter($entity.versionControlColumn.column)} () {
        return ${java.getInnerName($entity.versionControlColumn.column)};
    }
    
    protected void ${java.getSetter($entity.versionControlColumn.column)} (${entity.versionControlColumn.column.getJavaType()} ${java.getInnerName($entity.versionControlColumn.column)}) {
        this.${java.getInnerName($entity.versionControlColumn.column)} = ${java.getInnerName($entity.versionControlColumn.column)};      
    }
    
#end
    /**
     * Devolve um String que representa o objecto
     * @return String que representa o objecto
     */ 
    public String toString () {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append("${java.getName($entity)}(");
#foreach ($coluna in ${entity.getAllColumnList()})
#if ($velocityCount==1) 
        buffer.append("${java.getInnerName($coluna)}=");
#else
        buffer.append(", ${java.getInnerName($coluna)}="); 
#end
#if (${java.isArray($coluna)})
        buffer.append("[");
        
        if (${java.getInnerName($coluna)} != null) {
            for (int i = 0; i < ${java.getInnerName($coluna)}.length; i++) {
                if (i != 0) {
                    buffer.append(", ");
                }
            
                buffer.append(${java.getInnerName($coluna)}[i]);
            }
        }
        
        buffer.append("]");
#else
        buffer.append(${java.getInnerName($coluna)});
#end
#end
        buffer.append(")");
               
        return buffer.toString();
    }

    /**
     * Devolve o hash para o objecto
     * @return Hash do objecto
     */ 
    public int hashCode () {
        return toString().hashCode();
    }
    
    /**
     * Indica se o objecto for referente ao mesmo registo da tabela $entity.name
     * @param obj Objecto a comparar
     * @return Devolve true se o objecto for referente ao mesmo registo da tabela $entity.name
     */     
    public boolean equals (Object obj) {
        if (obj == null) {
            return false;
        }

        if (!(obj instanceof ${java.getName($entity)})) {
            return false;
        }

        ${java.getName($entity)} theOther = (${java.getName($entity)})obj;
        boolean result = true;

#if ($model.hasPrimaryKey($entity))
#foreach ($coluna in ${entity.getPrimaryKey().getColumnList()})
#if (${java.isJavaClass($coluna)})
        result = result && ${java.getInnerName($coluna)}.equals(theOther.${java.getGetter($coluna)}());
#else
        result = result && ${java.getInnerName($coluna)} == theOther.${java.getGetter($coluna)}();
#end
#end
#else
#foreach ($coluna in ${entity.getAllColumnList()})
#if (${java.isJavaClass($coluna)})
#if (${java.isArray($coluna)})
        result = result && java.util.Arrays.equals(${java.getInnerName($coluna)}, theOther.${java.getGetter($coluna)}());
#else
        result = result && ${java.getInnerName($coluna)}.equals(theOther.${java.getGetter($coluna)}());
#end
#else
        result = result && ${java.getInnerName($coluna)} == theOther.${java.getGetter($coluna)}();
#end
#end
#end

        return result;
    }
    
#if (!$entity.readOnly)     
    protected void setChanged (boolean value) {
#foreach ($coluna in ${entity.getColumnList()})
        ${java.getInnerName($coluna)}Changed = value;
#end
    }

    protected boolean isChanged () {
        return false#foreach ($coluna in ${entity.getColumnList()}) || ${java.getInnerName($coluna)}Changed#end;
    }    
#end      

    /**
     * Cria uma copia do objecto
     * @return Copia integral do objecto 
     */
    public ${java.getName($entity)} copyOf() {
        ${java.getName($entity)} ret = new ${java.getName($entity)}();

#foreach ($coluna in ${entity.getPrimaryKey().getColumnList()})
#if (${java.isJavaClass($coluna)})

        if (${java.getInnerName($coluna)} != null) {
#end
#if (${java.canCopy($coluna)})
#if (${java.isJavaClass($coluna)})    #end        ret.${java.getInnerName($coluna)} = ${java.getInnerName($coluna)};
#else
#if (${java.isArray($coluna)})
#if (${java.isJavaClass($coluna)})    #end        $coluna.javaType _${java.getInnerName($coluna)} = new ${java.getArrayJavaType($coluna)}[${java.getInnerName($coluna)}.length];
#if (${java.isJavaClass($coluna)})    #end        System.arraycopy(${java.getInnerName($coluna)}, 0, _${java.getInnerName($coluna)}, 0, ${java.getInnerName($coluna)}.length);
#if (${java.isJavaClass($coluna)})    #end        ret.${java.getInnerName($coluna)} = _${java.getInnerName($coluna)};
#else
#if (${java.isJavaClass($coluna)})    #end        ret.${java.getInnerName($coluna)} = ${java.getCopyOf($coluna)};
#end
#end
#if (${java.isJavaClass($coluna)})
        }
        
#end
#end        
#foreach ($coluna in ${entity.getColumnList()})
#if (${java.isJavaClass($coluna)})

        if (${java.getInnerName($coluna)} != null) {
#end
#if (${java.canCopy($coluna)})
#if (${java.isJavaClass($coluna)})    #end        ret.${java.getInnerName($coluna)} = ${java.getInnerName($coluna)};
#else
#if (${java.isArray($coluna)})
#if (${java.isJavaClass($coluna)})    #end        $coluna.javaType _${java.getInnerName($coluna)} = new ${java.getArrayJavaType($coluna)}[${java.getInnerName($coluna)}.length];
#if (${java.isJavaClass($coluna)})    #end        System.arraycopy(${java.getInnerName($coluna)}, 0, _${java.getInnerName($coluna)}, 0, ${java.getInnerName($coluna)}.length);
#if (${java.isJavaClass($coluna)})    #end        ret.${java.getInnerName($coluna)} = _${java.getInnerName($coluna)};
#else
#if (${java.isJavaClass($coluna)})    #end        ret.${java.getInnerName($coluna)} = ${java.getCopyOf($coluna)};
#end
#end
#if (!$entity.readOnly)
#if (${java.isJavaClass($coluna)})    #end        ret.${java.getInnerName($coluna)}Changed = ${java.getInnerName($coluna)}Changed;
#end
#if (${java.isJavaClass($coluna)})
        }
        
#end
#end    
#if ($model.hasVersionControl($entity))
        ret.${java.getInnerName($entity.versionControlColumn.column)} = ${java.getInnerName($entity.versionControlColumn.column)};   
#end     
   
        return ret;
    }
}
